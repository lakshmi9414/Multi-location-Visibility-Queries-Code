/* this file implements the class Heap */

#include "heap.h"
#include "../func/gendef.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>

//------------------------------------------
HeapEntry::HeapEntry()
{
	bounces = NULL;
}
//------------------------------------------
HeapEntry::~HeapEntry()
{
	delete [] bounces;
	bounces = NULL;
}
//------------------------------------------
void HeapEntry::init_HeapEntry(int _dim)
{
	dim = _dim;
	bounces = new float [2 * dim];
}
//------------------------------------------
void HeapEntry::copy(HeapEntry *_he)
{
	key = _he -> key;
	level = _he -> level;
	son = _he -> son;
	if (bounces)
	{
		memcpy(bounces, _he -> bounces, 2 * dim * sizeof(float));
	}
}
//------------------------------------------
//------------------------------------------
//------------------------------------------
Heap::Heap()
{
	cont = NULL;
	disk = new Disk();
}
//------------------------------------------
Heap::~Heap()
{
	delete disk;
	delete [] cont;
	cont = NULL;
}
//------------------------------------------
/*
void Heap::BFinsert(HeapEntry *_he, float _dist)
{
	//BFclean(_dist);

	if (_he -> bounces == NULL)
		error("init HeapEntry before calling BFinsert\n", true);
	//if (_he -> key > thre)
	//{
	//	disk -> insert(_he);
	//	return;
	//}

	int pos = used;  //pos is the position _he will be inserted
	for (int i = 0; i < used; i ++)
	{
		if (_he -> key < cont[i].key)
		{
			pos = i; i = used;
		}
	}
	//if (pos == used && disk -> used > 0)
	//{
	//	if (disk -> cont[0].key < _he -> key)
	//		//so _he should be inserted to the disk
	//	{
	//		disk -> cost ++;
	//		disk -> insert(_he);
	//		return;
	//	}
	//}

	enter(_he, pos);
	if (used > hsize)  
		//this is why the heap size is initiated with one more place than hsize (to facilitate
		//coding)
	{
		error("heap exceeded\n", true);
		used --;
		disk -> insert(&(cont[used]));
	}
}
//------------------------------------------
bool Heap::BFremove(HeapEntry *_he, float _dist)
//this function deheaps an entry. the return value indicates whether successful: false
//means heap is already empty
{
	//BFclean(_dist);
	if (used == 0)
	{
	//	thre += thre_inc;
	//	used = disk -> remove(cont, hsize, thre); 
	//	if (used == 0) 
			return false;
	}
	//if (!_he -> bounces)
	//	error("error in BFremove. init HeapEntry before calling BFremove\n", true);
	_he -> copy(&(cont[0]));
	expel(0);
	return true;
};
//------------------------------------------
*/
//------------------------------------------
void Heap::insert(HeapEntry *_he)
{
	int pos = used;  //pos is the position _he will be inserted
	enter(_he, pos);
	// now perform swapping
	pos++;
	int parent = pos;
	while (parent != 1)
	{
		int child = parent;
		parent /= 2;
		if (cont[parent - 1].key > cont[child - 1].key)
		{
			HeapEntry *the = new HeapEntry();
			the -> init_HeapEntry(cont[parent - 1].dim);
			the -> copy(&(cont[parent - 1]));
			cont[parent - 1].copy(&(cont[child - 1]));
			cont[child - 1].copy(the);
			delete the;
		}
		else 
			parent = 1;
	}

	if (used > hsize) 
	{
		error("heap exceeded...\n", true);
	}
}
//------------------------------------------
bool Heap::remove(HeapEntry *_he)
//this function deheaps an entry. the return value indicates whether successful: false
//means heap is already empty
{
	if (used == 0)
		return false;

	_he -> copy(&(cont[0]));
	used--;
	cont[0].copy(&(cont[used]));
	int parent = 1;
	while (2 * parent <= used)
	{
		int child = 2 * parent;
		if (2 * parent + 1 > used)
			child = 2 * parent;
		else
			if (cont[2 * parent - 1].key < cont[2 * parent].key)
				child = 2 * parent;
			else 
				child = 2 * parent + 1;

		if (cont[parent - 1].key > cont[child - 1].key)
		{
			HeapEntry *the = new HeapEntry();
			the -> init_HeapEntry(cont[parent - 1].dim);
			the -> copy(&(cont[parent - 1]));
			cont[parent - 1].copy(&(cont[child - 1]));
			cont[child - 1].copy(the);
			delete the;
			parent = child; 
		}
		else
			parent = used;
	}
	return true;
};
//------------------------------------------
void Heap::BFinsert(HeapEntry *_he, float _dist)
{
	//BFclean(_dist);

	//if (_he -> bounces1 == NULL)
	//	error("init HeapEntry before calling BFinsert\n", true);
	//if (_he -> key > thre)
	{
	//	error("testing...\n", true);
	//	disk -> insert(_he);
	//	return;
	}

	int pos = used;  //pos is the position _he will be inserted
	/*
	for (int i = 0; i < used; i ++)
	{
		if (_he -> key < cont[i].key)
		{
			pos = i; i = used;
		}
	}
	*/
	//if (pos == used && disk -> used > 0)
	//{
	//	if (disk -> cont[0].key < _he -> key)
	//		//so _he should be inserted to the disk
	//	{
	//		disk -> cost ++;
	//		disk -> insert(_he);
	//		return;
	//	}
	//}

	enter(_he, pos);
	// now perform swapping
	pos++;
	int parent = pos;
	while (parent != 1)
	{
		int child = parent;
		parent /= 2;
		if (cont[parent - 1].key > cont[child - 1].key)
		{
			HeapEntry *the = new HeapEntry();
			the -> init_HeapEntry(cont[parent - 1].dim);
			the -> copy(&(cont[parent - 1]));
			cont[parent - 1].copy(&(cont[child - 1]));
			cont[child - 1].copy(the);
			delete the;
		}
		else 
			parent = 1;
	}

	if (used > hsize)  
		//this is why the heap size is initiated with one more place than hsize (to facilitate
		//coding)
	{
		error("heap exceeded...\n", true);
		//testing
		used --;
		disk -> insert(&(cont[used]));
	}
}
//------------------------------------------
bool Heap::BFremove(HeapEntry *_he, float _dist)
//this function deheaps an entry. the return value indicates whether successful: false
//means heap is already empty
{
	//BFclean(_dist);
	if (used == 0)
	{
		//thre += thre_inc;
		//used = disk -> remove(cont, hsize, thre); 
		//testing...
		if (used == 0) 
			return false;
	}
	//if (!_he -> bounces1)
	//	error("error in BFremove. init HeapEntry before calling BFremove\n", true);
	_he -> copy(&(cont[0]));
	//expel(0);
	used--;
	cont[0].copy(&(cont[used]));
	int parent = 1;
	while (2 * parent <= used)
	{
		int child = 2 * parent;
		if (2 * parent + 1 > used)
			child = 2 * parent;
		else
			if (cont[2 * parent - 1].key < cont[2 * parent].key)
				child = 2 * parent;
			else 
				child = 2 * parent + 1;

		if (cont[parent - 1].key > cont[child - 1].key)
		{
			HeapEntry *the = new HeapEntry();
			the -> init_HeapEntry(cont[parent - 1].dim);
			the -> copy(&(cont[parent - 1]));
			cont[parent - 1].copy(&(cont[child - 1]));
			cont[child - 1].copy(the);
			delete the;
			parent = child; 
		}
		else
			parent = used;
	}
	return true;
};
//------------------------------------------
void Heap::BFclean(float _dist)
//this function cleans those entries with keys greater thab _dist
//in the memory
{
	for (int i = 0; i < used; i ++)
	{
		if (cont[i].key > _dist)
			used = i;
	}
}
//------------------------------------------
void Heap::BFinit(int _dim, int _hsize, float _thre, int _psize)
{
	if (cont)
		delete [] cont;
	hsize = _hsize;
	cont = new HeapEntry [hsize + 1];   // +1 is to facilitate insert
	for (int i = 0; i < hsize + 1; i ++)
		cont[i].init_HeapEntry(_dim);
	used = 0;
	thre = _thre;
	thre_inc = _thre;
	mode = BF;

	//disk -> init(_psize, _dim);
	//warning: we disable BFinit to save time
}
//------------------------------------------
void Heap::DFinit(int _hsize, int _dim)
{
	if (cont)
		delete [] cont;
	hsize = _hsize;
	cont = new HeapEntry [hsize + 1];   // +1 is to facilitate insert
	for (int i = 0; i < hsize + 1; i ++)
		cont[i].init_HeapEntry(_dim);
	used = 0;

	mode = DF;
}
//------------------------------------------
void Heap::DFinsert(HeapEntry *_he)
{
	int pos = used;  //pos is the position _he will be inserted
	for (int i = 0; i < used; i ++)
	{
		if (_he -> level < cont[i].level ||
			(_he -> level == cont[i].level && _he -> key < cont[i].key))
		{
			pos = i; i = used;
		}
	}
	enter(_he, pos);
	if (used > hsize)
	{
		printf("heap size exceeded.\n");
		exit(1);
	}
}
//------------------------------------------
bool Heap::DFremove(HeapEntry *_he)
//this function deheaps an entry. the return value indicates whether successful: false
//means heap is already empty
{
	if (used == 0)
	{
		return false;
	}

	_he -> copy(&(cont[0]));
	expel(0);
	return true;
};
//------------------------------------------
void Heap::enter(HeapEntry *_he, int _pos)
//this function enters a new entry into the heap at position _pos
{
	for (int i = used - 1; i >= _pos; i --)
	{
		cont[i + 1].copy(&(cont[i]));
	}
	cont[_pos].copy(_he);
	used ++;
}
//------------------------------------------
void Heap::expel(int _pos)
//this function expels an entry from the heap at position _pos
{
	for (int i = _pos; i < used - 1; i++)
	{
		cont[i].copy(&(cont[i + 1]));
	}
	used --;
}
//------------------------------------------
void Heap::HBclean(float _dist)
{
	for (int i = 0; i < used; i ++)
	{
		if (cont[i].key > _dist)
			used = i;
	}
}
//------------------------------------------
void Heap::HBinit(int _hsize, int _b)
{
	if (cont)
		delete [] cont;
	hsize = _hsize;
	cont = new HeapEntry [hsize + 1];   // +1 is to facilitate insert
	used = 0;
	b = _b;
	mode = HB;
}
//------------------------------------------
void Heap::HBinsert(HeapEntry *_he)
{
	int pos = used;  //pos is the position _he will be inserted
	for (int i = 0; i < used; i ++)
	{
		if (cont[i].key > _he -> key)
		{
			pos = i; i = used;
		}
	}
	enter(_he, pos);
	if (used > hsize)
	{
		printf("heap size exceeded.\n");
		exit(1);
	}
}
//------------------------------------------
bool Heap::HBremove(HeapEntry *_he, float _dist)
{
	HBclean(_dist);
	if (used == 0)
		return false;
	int vacant = hsize - used;
	for (int i = 0; i < used; i ++)
	{
		int lvl = cont[i].level;
		if (vacant > (b - 1) * (lvl - 1))
		{
			_he -> copy(&(cont[i]));
			expel(i);
			return true;
		}
	}
	printf("Error detected in HBremove\n");
	exit(1);
}

//------------------------------------------
//---added for validity region
int comp(const void *ve1, const void *ve2)
{
	HeapEntry *e1 = (HeapEntry *)ve1;
	HeapEntry *e2 = (HeapEntry *)ve2;

	if (e1->key > e2->key)
		return 1;
	else if (e1->key < e2->key)
		return -1;
	else
		return 0;
}

void Heap::resort()
{
	qsort((void*)cont, (size_t)used, sizeof(HeapEntry), comp);
}
//------------------------------------------
//------------------------------------------
Disk::Disk()
{
	cont = NULL;
	cost = 0;
	DSIZE = 100000;
}
//------------------------------------------
Disk::~Disk()
{
	delete [] cont;
	cont = NULL;
}
//------------------------------------------
void Disk::init(int _psize, int _dim)
{
	if (cont)
		delete [] cont;
	cont = new HeapEntry [DSIZE];
	for (int i = 0; i < DSIZE; i ++)
		cont[i].init_HeapEntry(_dim);

	psize = _psize;
	cost = 0; used = 0;
}
//------------------------------------------
void Disk::insert(HeapEntry *_he)
//this function inserts a new entry into the disk
{
	for (int i = 0; i < used; i ++)
	{
		if (_he -> key < cont[i].key)
		{   //so the new entry should be at position i
			for (int j = used - 1; j >= i; j --)
			{
				cont[j + 1].copy(&(cont[j]));
			}
			cont[i].copy(_he);

			//the simulated cost based on the fact that disk is organized as a linked list
			cost += ceil((float)i / psize) + 2 * ceil((float)(used - i) / psize);

			used ++;
			if (used == DSIZE)
				error("disk size exceeded\n", true);
			return;
		}
	}

	//the new entry is at the last positon
	cont[used].copy(_he);
	used ++;
	if (used == DSIZE)
		error("disk size exceeded\n", true);
	cost += ceil((float)used / psize) + 1;
}
//------------------------------------------
int Disk::remove(HeapEntry *_he, int _size, float _thre)
// this function will move (up to _size) entries (into _he) whose
// keys are no more than _thre. return value is how many entries are copied
{
	int i = 0;
	while (i < _size && cont[i].key <= _thre && i < used)
	{
		_he[i].copy(&(cont[i]));
		i ++;
	}
	for (int j = i; j < used; j ++)
	{
		cont[j - i].copy(&(cont[j]));
	}

	used -= i;
	cost += ceil((float) i / psize);

	return i;
}